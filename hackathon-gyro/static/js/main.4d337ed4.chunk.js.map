{"version":3,"sources":["ReactAccelerometer.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["ReactAccelerometer","superclass","props","call","this","state","x","y","z","rotation","landscape","handleAcceleration","throttle","bind","handleOrientation","__proto__","prototype","Object","create","constructor","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","event","orientation","setState","ref$1","useGravity","multiplier","acceleration","accelerationIncludingGravity","rotationRate","render","children","react","Component","propTypes","PropTypes","func","isRequired","number","bool","defaultProps","index","Interpreter","React","useState","direction","setDirectionState","locked","setLocked","setDirection","dir","setTimeout","zState","updateZ","xState","updateX","zDiff","Math","abs","SENSITIVITY_THRESHOLD","xDiff","App","className","src","logo","alt","alpha","beta","gamma","floor","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.4d337ed4.chunk.js","sourcesContent":["// stolen from https://www.npmjs.com/package/react-accelerometer\n// but updated for React v16\n\nimport react from 'react';\nimport PropTypes from 'prop-types';\nimport { throttle } from 'lodash';\n\nvar React = react;\n\n/**\n * @usage\n *    <ReactAccelerometer useGravity multiplier={3}>\n *      {(position, rotation) => (\n *        <div style={{ transform: `translate3d(${position.x}px, ${position.y}px, 0)`}}>\n *          Hello there\n *        </div>\n *      )}\n *    </ReactAccelerometer>\n */\nvar ReactAccelerometer = (function (superclass) {\n  function ReactAccelerometer (props) {\n    superclass.call(this, props);\n\n    this.state = {\n      x: null,\n      y: null,\n      z: null,\n      rotation: null,\n      landscape: false\n    };\n\n    this.handleAcceleration = throttle(this.handleAcceleration.bind(this), 100);\n    this.handleOrientation = this.handleOrientation.bind(this);\n  }\n\n  if ( superclass ) ReactAccelerometer.__proto__ = superclass;\n  ReactAccelerometer.prototype = Object.create( superclass && superclass.prototype );\n  ReactAccelerometer.prototype.constructor = ReactAccelerometer;\n\n  ReactAccelerometer.prototype.componentDidMount = function componentDidMount () {\n    this.handleOrientation();\n    window.addEventListener('devicemotion', this.handleAcceleration);\n    window.addEventListener('orientationchange', this.handleOrientation);\n  };\n\n  ReactAccelerometer.prototype.componentWillUnmount = function componentWillUnmount () {\n    window.removeEventListener('devicemotion', this.handleAcceleration);\n    window.removeEventListener('orientationchange', this.handleOrientation);\n  };\n\n  ReactAccelerometer.prototype.handleOrientation = function handleOrientation (event) {\n    var orientation = window.orientation;\n    this.setState({ landscape: orientation === 90 || orientation === -90 });\n  };\n\n  ReactAccelerometer.prototype.handleAcceleration = function handleAcceleration (event) {\n    var ref = this.state;\n    var landscape = ref.landscape;\n    var ref$1 = this.props;\n    var useGravity = ref$1.useGravity;\n    var multiplier = ref$1.multiplier;\n    var acceleration = useGravity ? event.accelerationIncludingGravity : event.acceleration;\n    var rotation = event.rotationRate || null;\n    var x = acceleration.x;\n    var y = acceleration.y;\n    var z = acceleration.z;\n\n    this.setState({\n      rotation: rotation,\n      x: (landscape ? y : x) * multiplier,\n      y: (landscape ? x : y) * multiplier,\n      z: z * multiplier\n    });\n  };\n\n  ReactAccelerometer.prototype.render = function render () {\n    var ref = this.props;\n    var children = ref.children;\n    var ref$1 = this.state;\n    var x = ref$1.x;\n    var y = ref$1.y;\n    var z = ref$1.z;\n    var rotation = ref$1.rotation;\n\n    /**\n     * We have to detect if one of the values was ever set by the 'devicemotion' event,\n     * as some browsers implement the API, but the device itself doesn't support.\n     */\n    if (x || y || z) {\n      return children({ x: x, y: y, z: z }, rotation)\n    }\n\n    return children()\n  };\n\n  return ReactAccelerometer;\n}(React.Component));\n\nReactAccelerometer.propTypes = {\n  children: PropTypes.func.isRequired,\n  multiplier: PropTypes.number,\n  useGravity: PropTypes.bool\n};\n\nReactAccelerometer.defaultProps = {\n  multiplier: 1,\n  useGravity: true\n};\n\nvar reactAccelerometer = ReactAccelerometer;\n\nvar index = reactAccelerometer;\n\nexport default index;\n//# sourceMappingURL=react-accelerometer.module.js.map\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport ReactAccelerometer from \"./ReactAccelerometer\";\n\nconst SENSITIVITY_THRESHOLD = 40;\nconst UP = \"UP\";\nconst LEFT = \"LEFT\";\nconst RIGHT = \"RIGHT\";\n\nconst Interpreter = ({ x, y, z, func: debounceSet }) => {\n  // Up/Left/Right directionality\n  const [direction, setDirectionState] = React.useState();\n  const [locked, setLocked] = React.useState(false);\n  const setDirection = dir => {\n    if (!locked) {\n      setLocked(true);\n      setDirectionState(dir);\n\n      setTimeout(() => {\n        setDirectionState(null);\n        setLocked(false);\n      }, 3000);\n    }\n  };\n\n  // Previous positional values to track moves\n  const [zState, updateZ] = React.useState(z);\n  const [xState, updateX] = React.useState(x);\n\n  // Check Up\n  const zDiff = Math.abs(z) - Math.abs(zState);\n  if (Math.abs(zDiff) > SENSITIVITY_THRESHOLD * 2) {\n    updateZ(z);\n\n    if (zDiff > 0) {\n      setDirection(UP);\n    }\n  }\n\n  // Check Left/Right\n  const xDiff = Math.abs(x) - Math.abs(xState);\n  if (Math.abs(xDiff) > SENSITIVITY_THRESHOLD) {\n    updateX(x);\n\n    if (x < xState) {\n      setDirection(RIGHT);\n    } else {\n      setDirection(LEFT);\n    }\n  }\n\n  return (\n    <div>\n      {direction}\n      {/* <ul>\n        <li>x: {x}</li>\n        <li>y: {y}</li>\n        <li>z: {z}</li>\n      </ul> */}\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h2>\n          <ReactAccelerometer multiplier={10}>\n            {({ x, y, z } = {}, { alpha, beta, gamma } = {}) => (\n              <Interpreter\n                x={Math.floor(x) || 0}\n                y={Math.floor(y) || 0}\n                z={Math.floor(z) || 0}\n              />\n            )}\n          </ReactAccelerometer>\n        </h2>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}